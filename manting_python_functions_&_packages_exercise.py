# -*- coding: utf-8 -*-
"""Manting_Python Functions & Packages-EXERCISE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yACRcYVq6RUpUUggYs95Kk7FXMrQRf_g

---
#Crash Course Python for Data Science - Intro to Python  
---
# 05 - Python Functions & Packages
---

##STOP! BEFORE GOING ANY FURTHER...  

1. Click "File" at the top.
2. Then, "Save a Copy in Drive."
3. Change the file name to something else, so you can differenciate it from the workshop notes. For example, put your name at the beggining: "Grace_Python Functions & Packages-EXERCISE".  

Now you have a copy of this notebook in your Drive account. This is the copy you'll edit and save for your own archives. You can come back to it as many times as you like to practice again! Be sure to do this for ***every*** exercise!

Remember, this exercises are open book, open neighbour, open everything! Try to do them on your own before looking at the solution samples. Join the slack channel to ask your questions. I will be in the channel too!

## Part 1: Functions

### Built-in functions


---


Make sure to run the cell below before beginning your assignment.
"""

x = ["a", "b", "c", "d", "e", "f"]

"""### 1.1 For the list of values provided and now saved in variable `x`, find the following:


*   The max?
*   The min?
*   Number of elements in the list?
*   Sort the list in _descending_ order.
"""

x = ["a", "b", "c", "d", "e", "f"]
max(x)

#@title Double click here for a sample solution

max(x)

x = ["a", "b", "c", "d", "e", "f"]
min(x)

#@title Double click here for a sample solution 

min(x)

x = ["a", "b", "c", "d", "e", "f"]
list(x)

#@title Double click here for a sample solution
len(x)

x = ["a", "b", "c", "d", "e", "f"]
x.sort(reverse=True)
print(x)

#@title Double click here for a sample solution

x.sort(reverse=True)
print(x)

"""### Methods


---

### 1.2 Using the same list:

*  Remove the second to last element. 
*  Add the letter "z" to the list.
*  Empty out the list.
"""

x = ["a", "b", "c", "d", "e", "f"]
x.append[2:]
print(x)

#@title Double click here for a sample solution

del x[1:]
print(x)

x.append('z')
print(x)

#@title Double click here for a sample solution 

x.append('z')
print(x)

x = ["a", "b", "c", "d", "e", "f"]
x.clear()
print(x)

#@title Double click here for a sample solution

x.clear()
print(x)

"""### 1.3 For the string `y` provided:

* Split the string at every empty space.
"""

y = "to thine own self be true, and it must follow, as the night the day, thou canst not then be false to any man."

y = "to thine own self be true, and it must follow, as the night the day, thou canst not then be false to any man."
y.split()

#@title Double click here for a sample solution

y.split()

"""### Custom Functions


---

### 1.4 Create a function that returns the sum of two numbers.
"""

def sum_(a,b):
  return a+b
sum_(1,2)

#@title Double click here for a sample solution

def sum_(a,b):
  return  a+b

sum_(2,3)

"""### 1.5 Create a function that, given a list of numbers, returns their average."""

def av_(lst)
  return sum(lst)/len(lst)
av(1,2,3,4,5)

#@title Double click here for a sample solution

def av_(lst):
  return sum(lst) / len(lst)

av_([1,2,3,4,5])

def str(line)
return %%capture,rev(line)
str(I am working on Python.)

#@title Double click here for a sample solution

def up_rev(str_):
  return str_[::-1].upper()

up_rev('hola')

"""### 1.7 Create a function that, given a list of strings, concatenates them together with proper spacing."""

def concat_strings(lst):
  separator =', '
  return separator.join(lst)
 
  test = ['you', 'me', 'he']
  concat_strings(test)

#@title Double click here for a sample solution

def concat_strings(lst):
  separator = ', '
  return separator.join(lst)

test = ['Python', 'Java', 'Ruby']
concat_strings(test)

"""## Part 2: Packages

### 2.1 Import the Random library and use it to create a list of ten random numbers from 0-50.
There are several ways to do this. Google around and find one that you can replicate here.
"""

import random 
randomnous = random.sample(range(50), 10)
randomnous

#@title Double click here for a sample solution

import random
randomnums = random.sample(range(50), 10)
randomnums

"""### 2.2 Import the Numpy library and assign it an alias "np". Then change the list of random numbers you generated into a Numpy array."""

import numpy as np
a = np.array(randomnous)

#@title Double click here for a sample solution

import numpy as np
a = np.array(randomnums)
a

"""### 2.3 Calculate the mean of the Numpy array. (Hint: Numpy has a method for this.)"""

np.mean(a)
a = [1,2,3,4,5,6]
np.mean(a)

#@title Double click here for a sample solution

np.mean(a)

"""### BONUS: 
In the cell below, run the following command and see what happens :)  
`import this`
"""

import this

"""### Make sure you save your Exercise notebook! See you next - G"""